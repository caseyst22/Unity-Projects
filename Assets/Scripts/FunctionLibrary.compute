#pragma kernel FunctionKernel

RWStructuredBuffer<float3> _Positions;

uint _Resolution, _Function;

float _Step, _Time;

float2 GetUV (uint3 id) {
    return (id.xy + 0.5) * _Step - 1.0;
}

void SetPosition (uint3 id, float3 position) {
    if (id.x < _Resolution && id.y < _Resolution) {
        _Positions[id.x + id.y * _Resolution] = position;
    }
}

#define PI 3.14159265358979323846

float3 Wave(float u, float v, float t) {
    float3 p;
    p.x = u;
    p.y = sin(PI * (u + v + t));
    p.z = v;
    return p;
}

float3 MultiWave (float u, float v, float t) {
    float3 p;
    p.x = u;
    p.y = sin(PI * (u + 0.5 * t));
    p.y += 0.5 * sin(2 * PI * (v + t));
    p.y += sin(PI * (u + v + 0.25 * t));
    p.y *= 1 / 2.5;
    p.z = v;
    return p;
}

float3 Ripple (float u, float v, float t) {
    float d = sqrt(u * u + v * v); 
    float3 p;
    p.x = u;
    p.y = sin(PI * (4 * d - t));
    p.y /= 1 + 10 + d; 
    p.z = v;
    return p;
}

float3 Sphere (float u, float v, float t) {
    float r = 0.9 + 0.1 * sin(PI * (6 * u + 4 * v + t));
    float s = r * cos(0.5 * PI * v);
    float3 p;
    p.x = s * sin(PI * u);
    p.y = r * sin(PI * 0.5 * v);
    p.z = s * cos(PI * u);
    return p;
}

float3 Torus (float u, float v, float t) {
    float r1 = 0.7 + 0.1 * sin(PI * (6 * u + 0.5 * t));
    float r2 = 0.15 + 0.05 * sin(PI * (8 * u + 4 * v + 2 * t));
    float s = r1 + r2 * cos(PI * v);
    float3 p;
    p.x = s * sin(PI * u);
    p.y = r2 * sin(PI * v);
    p.z = s * cos(PI * u);
    return p;
}

float3 ExecuteFunction (float2 uv) {
    if (_Function == 0) return Wave(uv.x, uv.y, _Time);
    else if (_Function == 1) return MultiWave(uv.x, uv.y, _Time);
    else if (_Function == 2) return Ripple(uv.x, uv.y, _Time);
    else if (_Function == 3) return Sphere(uv.x, uv.y, _Time);
    else return Torus(uv.x, uv.y, _Time);
}

[numthreads(8, 8, 1)]
void FunctionKernel (uint3 id: SV_DispatchThreadID) {
    float2 uv = GetUV(id);
    SetPosition(id, ExecuteFunction(uv));
}